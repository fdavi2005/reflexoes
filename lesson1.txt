Como a visualização de um diff entre duas versões de um arquivo ajuda você ver o bug que foi produzido?

O comando diff (comando FC no Windows) nos ajuda a encontrar erros e "bugs". Usando o comando o sistema compara os dois arquivos e destaca as diferenças entre
eles. Com as diferenças destacadas é fácil encontrar erros de digitação e outros tipos de erro no script.

Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

Ter acesso ao histórico permite que você possa fazer testes de código e ir e voltar nas versões garantindo que apenas as melhores versões do código estão "evoluindo". Com fácil acesso aos histórico você consegue evitar bugs retornando rapidamente a versão anterior do arquivo.

Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?
 
Na minha opinião as grandes vantagens da utilização dos commits manuais são principalmente a organização do processo de produção do código e consequentemente cria facilidade no processo de solução de problemas e bugs. Uma boa utilização dos commits permitem também uma efetiva utilização das função diff (FC no Windows). A grande desvantagem é depender da memória e organização do programador para realizar o salvamento do arquivo. Caso o programador não esteja habituado ou não seja diciplinado ele pode perder suas alterações e ter grandes prejuízos.
 
Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

O Git permite salvar todos os arquivos do repositório no mesmo commit pois os programas/aplicativos podem ser compostos por diversos aplicativos separadamente. Dessa forma ao salvar as alterações em diversos arquivos utilizando a mesma lógica você pode traçar o caminho através dos arquivos que compõe o projeto e não ter que salvar separadamente cada arquivo. O Google Docs trata cada arquivo separadamente por que  o objetivo não é necessariamente a criação de arquivos interrelacionados,

Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

Git log: Você deve usar o comando git log para visualizar todas as alterações "commits" salvos e verificar os comentários. Através destes comentários você poderá verificar qual alteração foi realizada em cada versão e assim olhar diretamente na versão desejada. 

Git diff. Com o Git Diff você pode definitivamente comparar duas versões "commits" distintas do repositório. Dessa forma você consegue verificar quais linhas foram alteradas, adicionadas e excluidas. Dessa forma é fácil verificar as diferenças entre as versões.

De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?

O controle de versão da grande segurança para fazer alterações pois permite que você fácil acesso as versões anteriores do seu projeto. Dessa forma é muito fácil comutar rapidamente entre versões e encontrar erros rapidamente, além de ter a certeza que depois de salvo o commit você pode reverter a esse estado a qualquer momento.

Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

Eu quero utilizar o Git para gerenciar as versões dos meus arquivos através dos commits, para publicar arquivos no GitHub, clonar repositórios. 

Teste